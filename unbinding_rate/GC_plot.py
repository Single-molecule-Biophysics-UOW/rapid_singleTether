# -*- coding: utf-8 -*-
"""
Created on Wed Dec  1 15:49:42 2021

@author: shm975
"""


sequence = """ATGGAGATGAGTCGTGGCAAGAATACCAAGAGTTCCTCGGTTTGCCAGTTATTAAAAGACTCGTATTTCCAAAAGACTGCAACATACTACTCAGTGCAGCTTCACAGAAACCTCATTCGTTTATTCCCTTGTTTGATTCAGAAGCAGGTGGGACAGGTGAACTTTTGGATTGGAACTCGATTTCTGACTGGGTTGGAAGGCAAGAGAGCCCCGAAAGCTTACATTTTATGTTAGCTGGTGGACTGACGCCAGAAAATGTTGGTGATGCGCTTAGATTAAATGGCGTTATTGGTGTTGATGTAAGCGGAGGTGTGGAGACAAATGGTGTAAAAGACTCTAACAAAATAGCAAATTTCGTCAAAAATGCTAAGAAATAGGTTATTACTGAGTAGTATTTATTTAAGTATTGTTTGTGCACTTGCCTGCAGGCCTTTTGAAAAGCAAGCATAAAAGATCTAAACATAAAATCTGTAAAATAACAAGATGTAAAGATAATGCTAAATCATTTGGCTTTTTGATTGATTGTACAGGAAAATATACATCGCAGGGGGTTGACTTTTACCATTTCACCGCAATGGAATCAAACTTGTTGAAGAGAATGTTCACAGGCGCATACGCTACAATGACCCGATTCTTGCTAGCCTTTTCTCGGTCTTGCAAACAACCGCCGGCAGCTTAGTATATAAATACACATGTACATACCTCTCTCCGTATCCTCGTAATCATTTTCTTGTATTTATCGTCTTTTCGCTGTAAAAACTTTATCACACTTATCTCAAATACACTTATTAACCGCTTTTACTATTATCTTCTACGCTGACAGTAATATCAAACAGTGACACATATTAAACACAGTGGTTTCTTTGCATAAACACCATCAGCCTCAAGTCGTCAAGTAAAGATTTCGTGTTCATGCAGATAGATAACAATCTATATGTTGATAATTAGCGTTGCCTCATCAATGCGAGATCCGTTTAACCGGACCCTAGTGCACTTACCCCACGTTCGGTCCACTGTGTGCCGAACATGCTCCTTCACTATTTTAACATGTGGAATTCTTGAAAGAATGAGTTCAGTGGTGCTGACACGATATTTTATTCATACAACATTGATTTCACCAATTATAATACCGCGCAATACTGTATGAGCATACAGTGGATCCGAGTCATTCCTGCAGCGAGTCCATGGGAGTCAAATAGACAACGATTTGAATTCGCTCTTCCGCTCGCGGCCGCTAAGACTCGAGTAGATGACTACGAGGTACCCGGGGATCCTCTAGAGTCGACCTGCAGGCATGCAAGCTTGGCGTAATCATGGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATACGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGCTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGAT"""


print(len(sequence))
#%%
CG = []
total_dG = []
Hbond_dG = []
stacking_dG = []
print('hello')
for char in range(len(sequence)-1):    
    if sequence[char] =='A':
        print('a:')
        dG_Hbond = 2*0.25
        if sequence[char+1] == 'A':
            dG_stack = 0.51
        if sequence[char+1] == 'C':
            dG_stack = 0.96
        if sequence[char+1] == 'G':
            dG_stack = 0.58
        if sequence[char+1] == 'T':
            dG_stack = 0.5
    if sequence[char] =='C':
        dG_Hbond = 3*0.25
        if sequence[char+1] == 'A':
            dG_stack = 0.42
        if sequence[char+1] == 'C':
            dG_stack = 0.52
        if sequence[char+1] == 'G':
            dG_stack = 0.34
        if sequence[char+1] == 'T':
            dG_stack = 0.02    
    if sequence[char] =='G':
        dG_Hbond = 3*0.25
        if sequence[char+1] == 'A':
            dG_stack = 0.62
        if sequence[char+1] == 'C':
            dG_stack = 0.72
        if sequence[char+1] == 'G':
            dG_stack = 0.56
        if sequence[char+1] == 'T':
            dG_stack = 0.48        
    if sequence[char] =='T':
        dG_Hbond = 2*0.25
        if sequence[char+1] == 'A':
            dG_stack = 0.71
        if sequence[char+1] == 'C':
            dG_stack = 0.58
        if sequence[char+1] == 'G':
            dG_stack = 0.61
        if sequence[char+1] == 'T':
            dG_stack = 0.10        
    stacking_dG.append(dG_stack)
    Hbond_dG.append(dG_Hbond)
    total_dG.append(dG_Hbond + dG_stack)
#%%
import numpy as np
import pandas as pd

ddG = pd.Series(total_dG)
dGH = pd.Series(Hbond_dG)
dGS = pd.Series(stacking_dG)


fig, ax = plt.subplots(2,sharex=True)

ax[0].plot(ddG.rolling(100).mean(),label = 'sum')
ax[0].plot(dGH.rolling(100).mean(),label='H-bonds')
ax[0].plot(dGS.rolling(100).mean(),label = 'stacking')
ax[0].legend()
ax[0].set_xlabel('Template position [nt]')
ax[0].set_ylabel('$\Delta G _{melt}$(n)  [kcal/mol]')
smooth_dG = ddG.rolling(100).mean()

ax[1].plot(smooth_dG.diff().rolling(100).mean(),color = 'blue')
ax[1].set_xlabel('Template position [nt]')
ax[1].set_ylabel('$\Delta\Delta G _{melt}$(n)  [kcal/mol]')

fig.show()
    
 #%%   
    
    
    if (char == "G") or (char =="C"):
        CG.append(1)
    else:
        CG.append(0)
        
#%%
import numpy as np
from matplotlib import pyplot as plt
import pandas as pd


plt.figure
CG = pd.Series(CG)
avgCG = CG.rolling(500).mean()

#plt.plot(CG)
plt.plot(avgCG)

plt.show()
